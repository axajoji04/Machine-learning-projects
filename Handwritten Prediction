import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_digits

df = load_digits()
_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))
for ax, image, label in zip(axes, df.images, df.target):
    ax.set_axis_off()
    ax.imshow(image, cmap=plt.cm.gray_r, interpolation="nearest")
    ax.set_title("training: %i" % label)
    print('shape', df.images.shape)
    print('images', df.images[0])

plt.show()

n_samples = len(df.images)
data = df.images.reshape((n_samples, -1))
print('data', data[0])
print('data shape', data[0].shape)
print('data shape', data.shape)
print('min', data.min())
print('max', data.max())
data = data / 16
print('min', data.min())
print('max', data.max())
print('data', data[0])

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(data, df.target, test_size=0.3)
print('train test', x_train.shape, x_test.shape, y_train.shape, y_test.shape)

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier()
rf.fit(x_train, y_train)
y_pred = rf.predict(x_test)
print("prediction", rf.predict(x_test))

from sklearn.metrics import confusion_matrix, classification_report

print('confusion matrix', confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
